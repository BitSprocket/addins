{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman{\*\falt Times};}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial{\*\falt Helvetica};}
{\f16\froman\fcharset0\fprq2{\*\panose 02020404030301010803}Garamond;}{\f17\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}LetterGothic{\*\falt Letter Gothic MT};}{\f137\froman\fcharset238\fprq2 Garamond CE;}
{\f138\froman\fcharset204\fprq2 Garamond Cyr;}{\f140\froman\fcharset161\fprq2 Garamond Greek;}{\f141\froman\fcharset162\fprq2 Garamond Tur;}{\f142\froman\fcharset186\fprq2 Garamond Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;
\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;
\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\nowidctlpar\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\qj\sl200\slmult0\nowidctlpar\adjustright 
\f16\fs22\cgrid \sbasedon0 \snext15 Authorbio;}{\s16\qj\nowidctlpar\tx240\tx420\adjustright \cgrid \sbasedon0 \snext16 Text;}{\s17\qj\sl200\slmult0\nowidctlpar\tx780\adjustright \f1\fs22\cgrid \sbasedon0 \snext17 caption;}{\s18\qc\sl320\slmult0
\nowidctlpar\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9360\tx10080\tx10800\tx11520\tx12240\tx12960\tx13680\tx14400\adjustright \b\fs18\cgrid \sbasedon0 \snext18 Sidebar Head in box;}{\s19\qj\nowidctlpar
\tx240\tx420\adjustright \cgrid \sbasedon16 \snext19 Sidebar Text;}{\s20\ri4320\sl200\slmult0\nowidctlpar\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\adjustright \f17\fs18\cgrid \sbasedon0 \snext20 Code;}{\s21\ri2430\nowidctlpar
\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\adjustright \f17\fs18\cgrid \sbasedon0 \snext21 Listing;}}{\info{\title \'a9 1999 Visual Basic Programmer's Journal}{\author cherylnpat}{\operator cherylnpat}{\creatim\yr1999\mo8\dy30\hr15\min45}
{\revtim\yr1999\mo8\dy30\hr16\min20}{\version4}{\edmins1}{\nofpages3}{\nofwords931}{\nofchars5307}{\*\company FTP}{\nofcharsws6517}{\vern71}}\margl1440\margr1440 
\widowctrl\ftnbj\aenddoc\hyphcaps0\formshade\viewkind4\viewscale153\viewzk2\pgbrdrhead\pgbrdrfoot \fet0\sectd \linex0\headery706\footery706\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \s17\qj\sl200\slmult0\nowidctlpar\widctlpar\tx780\adjustright \f1\fs22\cgrid {This file includes the listing for John Chamberlain\rquote s November 1999 feature, \ldblquote Control the Compile Process,\rdblquote 
 as well as the explanatory sidebar that offers insight into what\rquote s going on in the listing.
\par 
\par Sidebar 1
\par }\pard\plain \s18\qc\sl320\slmult0\nowidctlpar\widctlpar\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9360\tx10080\tx10800\tx11520\tx12240\tx12960\tx13680\tx14400\adjustright \b\fs18\cgrid {
HookDLLCall: Where the Magic Happens
\par }\pard\plain \s19\qj\nowidctlpar\widctlpar\tx240\tx420\adjustright \cgrid {Ninety-five percent of the code for the Compile Controller add-in is standard-variety, humdrum, add-in and app code. However, the add-
in includes one unusual and extremely powerful function: HookDLLCall (see Listing A). This call enables an app to intercept DLL calls in its own process space. When loaded, the add-in exists in the process space of the VB development environment. This mea
ns it can intercept any call in any module of that environment. 
\par \tab Clicking on the Hook/Unhook Compilation menu choice toggles the hooking and unhooking of CreateProcess using HookDLLCall. Once the add-in hooks CreateProcess, CreateProcessFilter\emdash not CreateProcess\emdash 
is called whenever VBA6 attempts to call CreateProcess. VB uses this call only for compiling, so CreateProcessFilter is called only when compiling a project to native code; compiling to p-code is not affected. The filter function manages the state of
 the compilation and activates the dialog box as needed.
\par \tab The call addresses for all implicitly linked DLLs are in a table called the Import Address Table (IAT) (sometimes referred to as the \ldblquote thunk table\rdblquote ). The operating system patches this table with the addresses for all the DLL
\rquote s exported functions when it loads a linked DLL, and the HookDLLCall scans this table for the target function\rquote s address, which it obtains with a call to Win32\rquote s GetModuleHandle. It then repatches the entry with the filter function
\rquote s address.
\par 
\par }\pard\plain \s15\qj\sl200\slmult0\nowidctlpar\widctlpar\adjustright \f16\fs22\cgrid {
\par }\pard\plain \s17\qj\sl200\slmult0\nowidctlpar\widctlpar\tx780\adjustright \f1\fs22\cgrid {Listing A 
\par }{\b Hook a DLL Call.}{ The potential uses of this function boggle the imagination. The IAT is the secret switchboard of Windows\emdash and now you know how to patch it. This call lets you be your own mini operating system.
\par 
\par Listing A
\par }\pard\plain \s21\ri2430\nowidctlpar\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\adjustright \f17\fs18\cgrid {
\par Const IMAGE_NT_SIGNATURE = &H4550
\par 
\par Private Function HookDLLImport(sImportingModuleName As _
\par \tab String, sExportingModuleName As String, vCallNameOrAddress _
\par \tab As Variant, lpHook As Long, ByRef lpOriginalAddress _
\par \tab As Long, ByRef sError As String) As Boolean
\par 
\par \tab Dim sCallName As String
\par \tab Dim lpImportingModuleHandle As Long
\par \tab Dim lpExportingModuleHandle As Long
\par \tab Dim lpProcAddress As Long
\par \tab Dim vectorIAT As Long, lenIAT As Long
\par \tab Dim lpEndIAT As Long, lpIATCallAddress As Long
\par \tab Dim lpflOldProtect As Long, lpflOldProtect2 As Long
\par \tab Dim lpPEHeader As Long
\par 
\par \tab On Error GoTo EH
\par 
\par \tab 'Validate the hook
\par \tab If lpHook = 0 Then sError = "Hook is null.": _
\par \tab \tab Exit Function
\par 
\par \tab 'Get handle (address) of importing module
\par \tab lpImportingModuleHandle = _
\par \tab \tab GetModuleHandle(sImportingModuleName)
\par \tab If lpImportingModuleHandle = 0 Then
\par \tab \tab sError = "Unable to obtain importing module handle " & _
\par \tab \tab \tab "for """ & sImportingModuleName & """."
\par \tab \tab Exit Function
\par \tab End If
\par 
\par \tab 'Get the proc address of the IAT entry to be changed
\par \tab If VarType(vCallNameOrAddress) = vbString Then
\par \tab \tab 'user is hooking an import
\par \tab \tab sCallName = CStr(vCallNameOrAddress)\tab 
\par \tab 
\par \tab \tab 'Get handle (address) of exporting module
\par \tab \tab lpExportingModuleHandle = _
\par \tab \tab \tab GetModuleHandle(sExportingModuleName)
\par \tab \tab If lpExportingModuleHandle = 0 Then sError = _ 
\par \tab \tab \tab "Unable to obtain exporting module _ handle for """ _
\par \tab \tab \tab & sExportingModuleName & """." : Exit Function
\par \tab 
\par \tab \tab 'Get address of call
\par \tab \tab lpProcAddress = _
\par \tab \tab \tab  GetProcAddress(lpExportingModuleHandle, sCallName)
\par \tab \tab If lpProcAddress = 0 Then sError = _
\par \tab \tab \tab "Unable to obtain proc address for """ _
\par \tab \tab \tab & sCallName & """.": Exit _ Function
\par \tab 
\par \tab Else 'user is restoring a hooked import
\par \tab \tab lpProcAddress = CLng(vCallNameOrAddress) 
\par \tab End If
\par 
\par \tab 'Beginning of the IAT is located at offset 0x1000
\par \tab 'in most PE modules
\par \tab vectorIAT = lpImportingModuleHandle + &H1000
\par 
\par \tab 'Scan module to find PE header by looking
\par \tab 'for header signature
\par \tab lpPEHeader = lpImportingModuleHandle
\par \tab Do
\par \tab \tab If lpPEHeader > vectorIAT Then 'not a PE module
\par \tab \tab \tab sError = "Module """ & sImportingModuleName & _ 
\par \tab \tab \tab \tab """ is not a PE module."
\par \tab \tab \tab Exit Function
\par \tab \tab Else
\par \tab \tab \tab If Deref(lpPEHeader) = IMAGE_NT_SIGNATURE Then 
\par \tab \tab \tab \tab 'we have located the module's PE header
\par \tab \tab \tab \tab Exit Do
\par \tab \tab \tab Else
\par \tab \tab \tab \tab lpPEHeader = lpPEHeader + 1 'keep searching
\par \tab \tab \tab End If
\par \tab \tab End If
\par \tab Loop
\par \tab 
\par \tab 'Determine and validate length of the IAT.
\par \tab 'The length is at offset 0xDC in the PE header.
\par \tab lenIAT = Deref(lpPEHeader + &HDC)
\par \tab If lenIAT = 0 Or lenIAT > &HFFFFF Then
\par \tab \tab 'its too big or too small to be valid
\par \tab \tab sError = "The calculated length of the Import " & _
\par \tab \tab \tab "Address Table in """ & sImportingModuleName _
\par \tab \tab \tab & """ is not valid: " & lenIAT
\par \tab \tab Exit Function
\par \tab End If
\par 
\par \tab 'Scan Import Address Table for proc address
\par \tab lpEndIAT = lpImportingModuleHandle + &H1000 + lenIAT
\par \tab Do
\par \tab \tab If vectorIAT > lpEndIAT Then
\par \tab \tab \tab 'we have reached the end of the table
\par \tab \tab \tab sError = "Proc address " & Hex(lpProcAddress) & _
\par \tab \tab \tab \tab " not found in Import Address Table of """ & _
\par \tab \tab \tab \tab sImportingModuleName & """."
\par \tab \tab \tab Exit Function
\par \tab \tab Else
\par \tab \tab \tab lpIATCallAddress = Deref(vectorIAT)
\par \tab \tab \tab If lpIATCallAddress = lpProcAddress Then
\par \tab \tab \tab \tab 'we have found the entry
\par \tab \tab \tab \tab Exit Do
\par \tab \tab \tab Else
\par \tab \tab \tab \tab vectorIAT = vectorIAT + 4
\par \tab \tab \tab \tab 'try next entry in table
\par \tab \tab \tab End If
\par \tab \tab End If
\par \tab Loop
\par \tab 
\par \tab 'Substitute hook for existing call address and 
\par \tab 'return existing address by ref. We must make this \tab 'memory writable to make the entry in the IAT
\par \tab If VirtualProtect(ByVal vectorIAT, 4, _ 
\par \tab \tab PAGE_EXECUTE_READWRITE, lpflOldProtect) = 0 Then
\par \tab \tab sError = "Unable to change IAT memory to " & _
\par \tab \tab \tab "execute/read/write."
\par \tab \tab Exit Function
\par \tab Else
\par \tab \tab 'save original address
\par \tab \tab lpOriginalAddress = Deref(vectorIAT)
\par \tab \tab CopyMemory ByVal vectorIAT, lpHook, 4 'set hook
\par \tab \tab 'restore memory protection
\par \tab \tab VirtualProtect ByVal vectorIAT, 4, _ 
\par \tab \tab \tab lpflOldProtect, lpflOldProtect2 
\par \tab End If
\par 
\par \tab HookDLLImport = True 'mission accomplished
\par 
\par \tab Exit Function
\par \tab 
\par EH:
\par \tab sError = "Unexpected error: " & Err.Description
\par 
\par End Function
\par 
\par 'Equivalent of *lngPointer (returns the value pointed to)
\par Function Deref(lngPointer As Long) As Long
\par \tab Dim lngValueAtPointer As Long
\par \tab CopyMemory lngValueAtPointer, ByVal lngPointer, 4
\par \tab Deref = lngValueAtPointer
\par End Function
\par 
\par }\pard\plain \s16\qj\nowidctlpar\widctlpar\tx240\tx420\adjustright \cgrid {
\par 
\par [CALLOUTS FOR LISTING A]
\par }\pard\plain \s21\ri2430\nowidctlpar\widctlpar\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\adjustright \f17\fs18\cgrid {
\par }\pard\plain \s19\qj\nowidctlpar\widctlpar\tx240\tx420\adjustright \cgrid {(for phrase reading "lpHook As Long":)
\par The address of the Filter function.
\par 
\par (for phrase reading "ByRef sError As String")
\par If there is an error, it is returned by reference.
\par 
\par (for line reading "lpOriginalAddress = Deref(vectorIAT)":)
\par The address in the IAT that is being patched over is returned by reference to the caller.
\par 
\par (for word reading "CopyMemory":)
\par Bruce McKinney's famous API call.
\par }\pard\plain \s21\ri2430\nowidctlpar\widctlpar\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\adjustright \f17\fs18\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }}